Functional Programming Principles in Scala
==========================================

Week 1
======

Functions and Evaluation
========================

Programming Paradigms
---------------------
Paradigm describes distinct concepts or thought patterns in some scientific
  discipline.

Main programming paradigms:
a. imperative programming
b. functional programming
c. logic programming

Orthogonal to it:
a. object-oriented programming

Imperative programming:
It is about
a. modifying mutable variables
b. using assignments
c. and control structures such as if-else, loops, break, continue, return.

Functional Programming (FP):
Restricted sense: Programming without mutable variables, assignments, loops,
  and other imperative control structures
Wider sense: functional programming means focusing on the functions

In particular, functions can be values that are produced, consumed, and
  composed.

Functions in a FP language are first class citizens.
This means
a. they can be defined anywhere, including inside other functions.
b. like any other value, they can be passed as parameters to functions and
  returned as results.
c. as for other values, there exists a set of operators to compose functions.

Some FP languages:
a. Restricted sense
Pure Lisp, XSLT, XPath, XQuery, FP
Haskell (without I/O Monad or UnsafePerformIO)

b. Wider sense
Lisp, Scheme, Racket, Clojure
SML, Ocaml, F#
Haskell (full language)
Scala
Smalltalk, Ruby

Recommended book:
Programming in Scala (Martin Odersky)

FP is becoming popular because
a. simpler reasoning principles
b. better modularity
c. good for exploiting parallelism for multicore and cloud computing

Oscon keynote: Working hard to keep it simple

Elements of Programming
-----------------------

Every non-trivial programming language provides:
a. primitive expressions representing the simplest elements.
b. ways to combine expressions
c. ways to abstract expressions, which introduce a name for an expression

FP provides interactive shell (REPL: Read-Eval-Print-Loop)
	$ scala
	$ sbt console

Parameter and Return types:
Function parameters comes with their type, which is give after the colon
	$ def power(x: Double, y: Int): Double = ...

If a return type is given, it follows the parameter list

Evaluation of function applications is done via substition model, which gives 
  foundation to FP.

Call-by-value (CBV) has the advantage that it evaluates every function argument 
  only once.
Call-by-name (CBN) has the advantage that a function argument is not evaluated 
  if the corresponding parameter is unused in the evaluation of the function
  body.

Evaluation Strategies and Termination
-------------------------------------

If CBV evaluation of an expression e terminates, then CBN evaluation of e
  terminates too.
The other direction is not true.

Scala normally uses CBV.
But, if the type of a function parameter starts with => it uses CBN

Conditionals and Value Definitions
----------------------------------

Scala has if-else conditional expression.

For e.g
	$ def abs(x: Int) = if (x >= 0) x else -x

Value Definitions:
The def form is "by name", its right hand side is evaluated on each use.
The val form is "by value", its right hand side is evaluated at the point of
  definition itself.

For e.g
	$ def loop: Boolean = loop

A definition
	$ def x = loop # will terminate

But,
	$ val x = loop # will lead to infinite loop

Example: Square roots with Newtons' method
------------------------------------------

  $ def sqrtIter(guess: Double, x: Double): Double = 
	   if (isGoodEnough(guess, x)) guess
	   else sqrtIter(improve(guess, x), x)

Recursive functions need an explicit return type in scala.

Blocks and Lexical Scope
------------------------

Put auxciliary functions inside function which is using it to avoid user to
  access these functions directly.

Blocks:
a. A block is delimited by braces { ... }
b. It contains a sequence of definitions or expressions
c. The last element of a block is an expression that defines its value
d. This return expression can be preceded by auxiliary definitions.
e. Blocks are themselves expressions.

Visibility:
a. The definitions inside a block are only visible from within the block.
b. The definitions inside a block shadow definitions of the same name outside
  the block.

Semicolons:
In Scala, semicolons at the end of lines are in most cases optional, but if
  there are more than one statements on a line, they need to be separated by
  semicolons.

Handle problem in writing huge multi-line expressions:
a. Use multi-line expressions in parentheses
b. Use operator on the first line

Tail Recursion
--------------

In call by value, the occurences of param of a function get replaced by the
  value of the param passed during calling.
This is called substitution.

If a function calls itself as its last action, the function's stack frame can
  be reused. This is called tail recursion.
Tail recursive functions are iteractive processes.

In general, if the last action of a function consists of calling a function
  (which may be the same), one stack frame would be sufficient for both
  functions. Such calls are called tail-calls.

In Scala, only directly recursive calls to the current functions are optimized.

Use @tailrec annotation, which will issue an error if implementation of a
  function is not tail recursive.

Week 2
======

Higher Order Functions
======================

Higher Order Functions
----------------------

In contrast to first order functions, which has datatypes as parameters,
  functions that take other functions as parameters or that return functions as
  results are caller Higher Order Functions.
This provides a flexible way to compose programs.

For e.g
Take the sum of the integers between a and b:

	$ def sumInts(a: Int, b: Int): Int =
		  if (a > b) 0 else a + sumInts(a+1, b)

This is special case of
Sigma f(n) for n = a to b

We can also write:

	$ def sum(f: Int => Int, a: Int, b: Int): Int =
		  if (a > b) 0 else f(a) + sum(f, a+1, b)

	$ def id(x: Int): Int = x

	$ def sumInts(a: Int, b: Int) = sum(id, a, b)

Here, sum function is a higher order function.

Passing functions as parameters leads to the creation of many small functions.
  In order to overcome this, we'll write a function without giving it a name,
  which are otherwise called anonymous functions.

For e.g
  
  $ (x: Int) => x * x * x

Here, (x: Int) is the parameter of the function, and x * x * x is the body.

Using annonymous functions:

  $ def sum(f: Int => Int, a: Int, b: Int): Int =
    if (a > b) 0 else f(a) + sum(f, a+1, b)

  $ def sumInts(a: Int, b: Int) = sum(x => x, a, b)

This is using linear recursion, but we can optimized it using tail recursion.

  $ def sum(f: Int => Int, a: Int, b: Int): Int = {
      def loop(acc: Int, x: Int): Int = {
        if (x > b) acc
        else loop(f(x) + acc, x + 1)
      }
      loop(a, 0)
    }

  $ sum(x => x, 1, 10)

Currying
--------

Functions returning functions.

For e.g

  $ def sum(f: Int => Int): (Int, Int) => Int = {
      def sumF(a: Int, b, Int): Int = {
        if (a > b) 0
        else f(a) + sumF(a + 1, b)
      }
      sumF
  }

Hence, we can define

  $ def sumInts = sum(x => x)

Which gives us capability to do

  $ sumInts(2, 3)

Which can be also written as

  $ sum(x => x)(2, 3)

In scala, we can define functions returning functions as follows:

  $ def sum(f: Int => Int)(a: Int, b: Int): Int =
      if (a > b) 0 else f(a) + sum(f)(a + 1, b)

Here, function type of sum is

  (Int => Int) => (Int, Int) => Int

In general:

  $ def f = (args1 => (args2 => ... (argsn => E) ... ))

This style of definition and function application is called currying.

Example: Finding fixed points
-----------------------------

The expressive power of a language is greatly increases if we can pass
  function arguments.

Functions are essential abstractions because they allow us to introduce
  general methods to perform computations as explicit and named elements
  in our programming language.

Abstractions can be combined with higher-order functions to create new
  abstractions.

Scala Syntax Summary
--------------------

Contex-free syntax in Extended Backus-Naur Form (EBNF), where
  | denotes an alternative
  [...] an option (0 or 1)
  {...} a repetition (0 or more)

Types:

Type = SimpleType | FunctionType
FunctionType = SimpleType '=>' Type | '(' [Types] ')' '=>' Type
Simpletype = Ident
Types = Type {',' Type}

For e.g
Numeric type: Int, Double
Function type: Int => Int, (Int, Int) => Int

Functions and Data
------------------

Classes and Objects.

Packaging functions operating on a data abstraction in the data abstraction
  itself. Such functions are called methods.

More Fun with Rationals
-----------------------

One can use 'val' or 'def' while defining fields in order to optimize code.
This ability to choose different implementations of the data without affecting
  clients is called data abstraction.

On the inside of a class, the name 'this' represents the object on which the
  current method is executed.

Use require function to put restrictions on the params.

'require' is a predefined function
It takes a condition and an optional message string.
If the condition passed to require is false, an IllegalArgumentException is
  thrown with the given message string.

Besides require, there is also assert.
Assert also takes a condition and an optional message string as parameters.

Assert throws 'AssertionError'.

This reflects a difference in intent:
a. require is used to enforce a precondition on the caller of a function.
b. assert is used as to check the code of the function itself.

Constructors:
In Scala, a class implicitly introduces a constructor. This one is called
  primary constructor of the class.

The primary constructor:
a. takes the parameter of the class
b. and executes all statements in the class body.

Use $ def this() to explicitly create a constructor.

Evaluation and Operators
------------------------

Class and objects also works using substitution method.
But, instead of one substitution, there are three for each method call.

Operators:
Step1: Infix Notation
Any method with a parameter can be used like an infix operator.
For e.g
Use r add s in place of r.add(s)

Step2: Relaxed Identifiers
Operators can be used as identifiers.
a. Alphanumeric
b. Symbolic
c. The underscore character '_'

Week 3
======

Data and Abstraction
====================

Class Heirarchies
-----------------

Abstract classes: can contain members which are missing an implementation.
No Instances of an abstract class can be created with the operator new.

Use 'extends' keyword to inherit abstract class and its methods.

If definition of method is already present in base class, one has to mention
  'override' keyword in subclass while re-definining the method.

One can contain Singleton object in order to restrict users to create more than
  one object of a class.

Standalone applications in Scala contains an object with a main method.

object HelloWorld {
  def main(args: Array[String]) = println("Hello, World!")
}

How classes are organised
-------------------------

Packages:
Classes and Objects are organised in packages.
To place a class or object inside a package, use package clause at the top
  of your source file.

Use import to use a class present in a different package in your current.
import package.class
import package.{class1, class2}
import package._

Some entities are automatically imported in any Scala program.
a. All members of package scala
b. All members of package java.lang
c. All members of the singleton object scala.Predef

Traits:
In Java, as well as in Scala, a class can only have one superclass.
One can use traits, which is declared like an abstract class, just with trait
  instead of abstract class.

Classes, Objects, and Traits can inherit from at most one class but arbitary
  many traits.
For e.g
  class Square extends Shape with Planar with Movable ...

Traits resembles interfaces in Java, but are more powerful because they can
  contain fields and concrete methods.

On the other hand, traits cannot have (value) parameters, only classes can.

Top Types:
Any: the base type of all types
AnyRef: the base type of all references types (String, Object, Iterable)
AnyVal: the base type of all primitive types (Int, Long, Float, Double, Boolean)

The Nothing type:
It is subtype of every other type.
Uses:
a. To signal abnormal termination
b. As an element type of empty collections

The Null type:
Every reference class type also has null as a value.
The type of null is Null.

Exceptions:
threw Exc

Polymorphism
------------

Type parameters:
We can generalize class definition using a type parameter.
For e.g
trait List[T]
class Cons[T]

Like classes, functions can have type parameters.
For e.g
def singleton[T](elem: T) = ...

In fact, the Scala compiler can usually deduce the correct type parameters
  from the value arguments of a function call.

Type parameter do not affect evaluation in Scala.
This is called type erasure.

Polymorphism means that a function type comes "in many forms".
a. the function can be applied to arguments of many types.
b. the type can have instances of many types.

Two principal forms of polymorphism:
a. subtyping: instances of a subclass can be passed to a base class.
b. generics: instances of a function or class are created by type param.

Week 4
======

Types and Pattern Matching
==========================

Objects Everywhere
------------------

Pure Object Orientation:
A pure object-orientation language is one in which every value is an object.
If the language is based on classes, this means that the type of each value is
  a class.

Scala is a pure object-oriented language.

One can define JVM's primitive types as a class from first principles.

Functions as Objects
--------------------

Function values are treated as objects in Scala.

The function types A => B is just abbreviation for the class 
  scala.Function1[A, B], which is roughly defined as follows.

package scala

trait Function1[A, B] {
  def apply(x: A): B
}

So, functions are objects with apply methods.

There are also traits Function2, Function3 ... for which take more parameters.
(currently upto 22)

Methods are also objects.

Subtyping and Generics
----------------------

Interactions between subtyping and generics:
a. bounds
b. variance

Use bounds during defining return type for functions returning multiple types.
For e.g
  $ def assertAllPos(s: InSet): InSet = ...

is not the best way to define return type for the function since it can return
  empty, or Inset, or exception

Instead use bounds,
  $ def assertAllPos[S <: InSet](r: S): S = ...

Here "<: InSet" is the upper bound of the type parameter S:
It means that S can be instantiated only to types that conform to InSet.

Generally,
a. S <: T means: S is subtype of T
b. S >: T means: S is supertype of T
c. S >: T1 <: T2 means: S is any type on the interval between T1 and T2

If A <: B, then everything one can to do with a value of type B one should
  also be able to do with a value of type A.

Variance
--------

A type that accepts mutations of its elements should not be covariant.
But, immutable types can be covariant, if some conditions on methods are met.

Scala let you declare the variance of a type by annotating the type parameter:
class C[+A] {...} C is covariant
class C[-A] {...} C is contravariant
class C[A] {...} C is nonvariant

Typing rules between function types:
If A2 <: A1 and B1 <: B2, then
  A1 => B1 <: A2 => B2

So functions are contravariant in their argument type(s) and convariant in their
  result type.

The Scala compiler will check that there are no problematic combinations when
  compiling a class with variance annotations.
Roughly,
a. covariance type parameters can only appear in method results.
b. contravariant type parameters can only appear in method parameters.
c. invariant type parameters can appear anywhere.

Decomposition
-------------

Creating traits and class results in quadratic increase in method definition.

One solution is to use type tests and type casts, using functions
isInstanceOf[T]
asInstanceOf[T]

But, their use in Scala is discouraged, because there are better alternatives,
  it is not sure whether type cast will work until runtime.

Use Object-Oriented Decomposition, i.e defining methods in the classes itself.
But, there are limitation to this, where we need non-local knowledge to evaluate
  a method in a class.

Pattern Matching
----------------

Decomposition is required to find a general and convenient way to access objects
  in a extensible class hierarchy.

Case classes:
Similar to normal class definitions, except that it is preceded by the modifier
  case. For e.g

trait Expr
case class Number(n: Int) extends Expr
case class Sum(e1: Expr, e2: Expr) extends Expr

Pattern Matching is a generalisation of switch from C/Java to class hierachies.
It's expressed in Scala using the keyword match.
For e.g

def eval(e: Expr): Int = e match {
  case Number(n) => n
  case Sum(e1, e2) => eval(e1) + eval(e2)
}

General, 

e match {
  case pattern => expression
  ...
}

Patterns are constructed from:
a. Constructors
b. variables
c. wildcard patterns _,
d. constants

Variables always begins with a lowercase letter.
Names of constant begin with a capital letter, with exception of the reserved
  words null, true, false

It is possible to define the pattern matching function as a method in a class.

Lists
-----

The list is the fundamental data structure in functional programming.
A list having x1...xn as elements is written List(x1, ..., xn)

For e.g
val fruits = List("Apple", "Banana")

Difference between lists and arrays:
a. Lists are immutable - the elements of list cannot be changed.
b. Lists are recursive, while array are flat.

Like arrays, lists are homogeneous: the elements of a list must all have the
  same type.
The type of a list with elements of type T is written as scala.List[T] or 
  shorter List[T]

All lists are constructed from:
a. the empty list Nil, and
b. the construction operator :: (cons)

Operators ending in ":" associate to the right.
A :: B :: C is interpreted as A :: (B :: C)

Operations on lists:
head
tail
isEmpty

Week 5
======

Lists
=====

More functions on lists
-----------------------

Sublist and element access:
xs.length
xs.last
xs.init
xs take n
xs drop n
xs(n)

Creating new lists:
xs ++ ys
xs.reverse
xs updated (n, x)

Finding elements:
xs indexOf x
xs contains x

Pairs and tuples
----------------

The pair consisting of x and y is written as (x, y) in Scala.
For e.g
val pair = ("answer", 42)
val (label, value) = pair
pair._1
pair._2

A tuple type (T1 ... Tn) is an abbreviation of the type
  scala.Tuplen[T1, ... Tn]

Implicit Parameters
-------------------

In order to make the function general, use type parameterization.
One can also use scala.math.Ordering[T]

Use implicit in front of ordering to let compiler figure out the correct type.

Higher Order List Functions
---------------------------

Rather than creating cases in function definition, one can use higher order
  function, such as 
a. map
b. filter
c. filterNot
d. partition
e. takeWhile
f. dropWhile
g. span

Reduction of lists
------------------

Use reduceLeft to reduce list.
foldLeft is like reduceLeft but takes an accumulator, z, as an additional
  parameter.

In the same way, we have reduceRight and foldRight

Instead of ((x, y) => x * y), one can write shorter:
_ * _

Every _ represents a new parameter, going from left to right.

For operators that are associative and commutative, foldLeft and foldRight are
  equivalent.

Reasoning about Concat
----------------------

In order to do reasoning about list concat, one can use Structural Induction.
The principal of structural induction is analogous to natural induction.

To prove a property P(xs) for all lists xs,
a. show that P(Nil) holds (base case)
b. for a list xs and some element x, show the induction step:
  if P(xs) holds, then P(x :: xs) also holds.
