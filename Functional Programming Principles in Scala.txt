Functional Programming Principles in Scala
==========================================

Week 1
======

Functions and Evaluation
========================

Programming Paradigms
---------------------
Paradigm describes distinct concepts or thought patterns in some scientific discipline

Main programming paradigms:
a. imperative programming
b. functional programming
c. logic programming

Orthogonal to it:
a. object-oriented programming

Imperative programming:
It is about
a. modifying mutable variables
b. using assignments
c. and control structures such as if-else, loops, break, continue, return.

Functional Programming (FP):
Restricted sense: Programming without mutable variables, assignments, loops, and other imperative control structures
Wider sense: functional programming means focusing on the functions

In particular, functions can be values that are produced, consumed, and composed.

Functions in a FP language are first class citizens.
This means
a. they can be defined anywhere, including inside other functions.
b. like any other value, they can be passed as parameters to functions and returned as results.
c. as for other values, there exists a set of operators to compose functions.

Some FP languages:
a. Restricted sense
Pure Lisp, XSLT, XPath, XQuery, FP
Haskell (without I/O Monad or UnsafePerformIO)

b. Wider sense
Lisp, Scheme, Racket, Clojure
SML, Ocaml, F#
Haskell (full language)
Scala
Smalltalk, Ruby

Recommended book:
Programming in Scala (Martin Odersky)

FP is becoming popular because
a. simpler reasoning principles
b. better modularity
c. good for exploiting parallelism for multicore and cloud computing

Elements of Programming
-----------------------

Every non-trivial programming language provides:
a. primitive expressions representing the simplest elements.
b. ways to combine expressions
c. ways to abstract expressions, which introduce a name for an expression

FP provides interactive shell (REPL: Read-Eval-Print-Loop)
	$ scala
	$ sbt console

Parameter and Return types:
Function parameters comes with thier type, which is give after the colon
	$ def power(x: Double, y: Int): Double = ...

If a return type is given, it follows the parameter list

Evaluation of function applications is done via substition model, which gives foundation to FP.

Call-by-value (CBV) has the advantage that it evaluates every function argument only once.
Call-by-name (CBN) has the advantage that a function argument is not evaluated if the corresponding parameter is unused in the evaluation of the function body.

Evaluation Strategies and Termination
-------------------------------------

If CBV evaluation of an expression e terminates, then CBN evaluation of e terminates too.
The other direction is not true.

Scala normally uses CBV.
But, if the type of a function parameter starts with => it uses CBN

Conditionals and Value Definitions
----------------------------------

Scala has if-else conditional expression.

For e.g
	$ def abs(x: Int) = if (x > 0) x else -x

Value Definitions:
The def form is "by name", its right hand side is evaluated on each use.
The val form is "by value", its right hand side is evaluated at the point of definition itself.

For e.g
	$ def loop: Boolean = loop

A definition
	$ def x = loop # will terminate

But,
	$ val x = loop # will lead to infinite loop

Example: Square roots with Newtons' method
------------------------------------------

def sqrtIter(guess: Double, x: Double): Double = 
	if (isGoodEnough(guess, x)) guess
	else sqrtIter(improve(guess, x), x)

Recursive functions need an explicit return type in scala.

Blocks and Lexical Scope
------------------------

Put auxciliary functions inside function which is using it to avoid user to access these functions directly.

Blocks:
a. A block is delimited by braces { ... }
b. It contains a sequence of definitions or expressions
c. The last element of a block is an expression that defines its value
d. This return expression can be preceded by auxiliary definitions.
e. Blocks are themselves expressions.

Visibility:
a. The definitions inside a block are only visible from within the block.
b. The definitions inside a block shadow definitions of the same name outside the block.

Semicolons:
In Scala, semicolons at the end of lines are in most cases optional, but if there are more than one statements on a line, they need to be separated by semicolons.

Handle problem in writing huge multi-line expressions:
a. Use multi-line expressions in parentheses
b. Use operator on the first line

Tail Recursion
--------------

In call by value, the occurences of param of a function get replaced by the value of the param passed during calling.
This is called substitution.

If a function calls itself as its last action, the function's stack frame can be reused. This is called tail recursion.
Tail recursive functions are iteractive processes.

In general, if the last action of a function consists of calling a function (which may be the same), one stack frame would be sufficient for both functions. Such calls are called tail-calls.

In Scala, only directly recursive calls to the current functions are optimized.

Use @tailrec annotation, which will issue an error if implementation of a function is not tail recursive.
